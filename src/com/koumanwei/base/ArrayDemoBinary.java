package com.koumanwei.base;

/**
 * 2017-04-05 下午1:31
 *
 * @author koumanwei
 * @version 1
 */
public class ArrayDemoBinary {
    public static void main(String[] args) {
        binary(26);
    }

    /**
     * 定义一个功能，打印一个十进制对应的十六进制的表现形式
     */
    private static void binary(int num) {
        // 定义一个十六进制的元素的表
        // 注意，这是一种思想，应该好好体会这种思想，而应用数组来存储其实操作的是角标
        char[] arr = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        // 一个int类型的数据是32位，4个字节
        // 例如26
        // 00000000 00000000 00000000 00111100
        // 转换成16进制，就是没4位计算一次

        // 1、取出前4位
        //        00000000 00000000 00000000 00111100
        //      & 00000000 00000000 00000000 00001111
        //   结果：00000000 00000000 00000000 00001100

        // 2、右移4位继续取4位
        //            00000000 00000000 00000000 00111100
        //      & 00000000 00000000 00000000 00001111
        //   结果：00000000 00000000 00000000 00000011

        // 将每4位计算出来的结果转换为对应的十六进制数
        // 因为元素对应的数字正好跟数组角标对应上，所以先把十六进制的这些字符存储到数组中，然后利用角标去获取
        // 什么时候使用数组？
        // 当同一类型的元素较多时，就是用数组对数据进行存储

        // 用来存储十六进制的数，因为16进制的数最多有8个字符，所以这个数组的长度为8
        char[] chs = new char[8];

        // 定义数组的指针
        int pos = chs.length - 1;
        while (num != 0) {
            int temp = num & 15;
            chs[pos] = arr[temp];
            num = num >>> 4;
            pos--;
        }
        for (int i = pos + 1; i < chs.length; i++) {
            System.out.print(chs[i]);
        }
    }
}
