package com.koumanwei.keyword;

/**
 * static关键字的使用
 * 
 * @author koumanwei
 *
 */
public class StaticDemo {
	public static void main(String[] args) {
		// 当创建Person这个对象的时候，因为country都是China
		// 所以这个变量应该被所有的Person对象共享
		// 这样，这些Person对象里面就不用保存country这个变量
		// 从而减少内存的开销
		Person person = new Person();
		person.name = "小明";
		person.show();
		Person person1 = new Person();
		person1.name = "小强";
		person1.show();
	}
}

class Person {
	String name;
	// 静态变量多了一种调用方式，除了用对象调用外，还可以用类名调用
	// 成员方法被调用的方式有两种，一是被类调用（但必须是静态），二是被对象调用。

	// 静态方法不能调用非静态方法和非静态成员，为什么？
	// 答：因为此时没有对象，而非静态成员依附于对象存在，一句话总结：静态只能访问静态

	// 成员函数是否需要被静态修饰呢：
	// 答：如果函数中没有访问到对象的特有属性时，就可以被静态修饰

	// 如果一个类中所有的方法都是静态的，那么就不需要创建对象，所以在本类中，加入一些强制措施
	// 将构造函数私有化，这样就无法创建该类的对象了

	static String country = "China";

	// 当在描述一个类的时候，如果每个对象上具有相同的属性的值，就可以变成静态，让所有对象共享
	public void show() {
		System.out.println("name=" + name);
		System.out.println("country=" + country);
	}

	/**
	 * static特点：
	 */
	// 1、随着类的加载而加载。
	// 也就是说：静态会随着类的消失而消失，说明它的生命周期最长。
	// 2、优先于对象存在。
	// 明确一点：静态时先存在的。对象是后存在的。
	// 3、被所有对象所共享。
	// 4、可以直接被类名所调用。

	/**
	 * 实例变量（非静态成员变量）和类变量（静态成员变量）的区别：
	 */
	// 1、存放位置。
	// 类变量随着类的加载而存在于方法区中。
	// 实例变量随着对象的建立而存在于堆内存中。
	// 2、生命周期。
	// 类变量生命周期最长。随着类的消失而消失。
	// 实例变量生命周期随着对象的消失而消失。

	/**
	 * 静态的使用注意事项：
	 */
	// 1、静态方法只能访问静态成员（成员变量和方法）。
	// 非静态方法既可以访问静态也可以访问非静态。
	// 2、静态方法中不可以定义this super关键字。
	// 因为静态优先于对象存在。所以静态方法中不可以出现this。
	// 3、主函数是静态。

	/**
	 * 静态有利有弊：
	 */
	// 利：对对象共享数据进行单独空间的存储，节省内存，没有必要每个对象中都存储一份。
	// 可以直接被类名调用。
	// 弊：生命周期过长。访问出现局限性。（静态虽好，只能访问静态）
	// 静态代码块：
	// 格式：
	// static
	// {
	// 静态代码块中的执行语句。
	// }
	// 特点：随着类的加载而执行，只执行一次，并优先于主函数执行。
	// 用于给类进行初始化的。
}
